#pragma kernel CSMain

RWStructuredBuffer<float> Result;
StructuredBuffer<float3> vertices;
StructuredBuffer<int> triangles;

float length;
float3 position;
float3 direction;
int ThreadsCount;


bool IntersectRayPlane(float3 rayOrigin, float3 rayDirection, float3 posOnPlane, float3 planeNormal, out float3 intersectionPoint)
{
  float rDotn = dot(rayDirection, -planeNormal);

  //parallel to plane or pointing away from plane?
  if (rDotn < 0.0000001 )
    return false;
 
  float s = dot(-planeNormal, (posOnPlane - rayOrigin)) / rDotn;
	
  intersectionPoint = rayOrigin + s * rayDirection;

  return true;
}

bool RightCloser (float3 orign, float3 target, float3 normal, float3 tPoint)
{
  float3 right = cross(target - orign, normal);
  float3 rDir = right - orign;
  if (distance(orign + right, tPoint) >= distance(orign - right, tPoint))
  return true;
  return false;
}

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{

    for (int i = triangles.Length / ThreadsCount * id.x; i < triangles.Length / ThreadsCount * (id.x+1) - 2; i += 3)
        {
		    float3 points0;
            float3 points1;
            float3 points2;
		    points0 = vertices[triangles[i]];
            points1 = vertices[triangles[i + 1]];
            points2 = vertices[triangles[i + 2]];

			float3 nrm = cross(points1 - points0, points2 - points0); //Normal(points0, points1, points2);
			nrm = normalize (nrm);

			if (length > distance(points0, position) || length > distance(points1, position) || length > distance(points2, position))
            {
			    float dist = 0;

				float3 poi;
				if (IntersectRayPlane(position, direction, points0, nrm, poi)){

				dist = distance(poi, position);


	             if(RightCloser(points0, points1, nrm, poi) && RightCloser(points1, points2, nrm, poi) && RightCloser(points2, points0, nrm, poi))
                {
				         if (Result[6] > dist || Result[6] == 0)
                        {
				Result[0] = poi.x;
				Result[1] = poi.y;
				Result[2] = poi.z;
				Result[3] = nrm.x;
				Result[4] = nrm.y;
				Result[5] = nrm.z;
				Result[6] = dist;
                        }
				}
				}
			} 
		}
}
